"""
M√≥dulo principal do sistema de processamento de telemetria veicular.
Integra todas as funcionalidades em uma solu√ß√£o completa conforme especifica√ß√£o.
"""

import os
import sys
from datetime import datetime
from typing import Dict, Optional
import pandas as pd

from .telemetry_processor import TelemetryProcessor, process_telemetry_csv
from .enhanced_reports import EnhancedPDFReportGenerator, generate_enhanced_report
from .test_telemetry_qa import run_all_qa_tests


class TelemetryProcessingSystem:
    """Sistema completo de processamento de telemetria veicular"""
    
    def __init__(self, config: Optional[Dict] = None):
        """
        Inicializa o sistema de processamento de telemetria
        
        Args:
            config: Dicion√°rio com configura√ß√µes do sistema
        """
        self.config = config or {}
        self.processor = TelemetryProcessor(self.config)
        self.report_generator = EnhancedPDFReportGenerator()
    
    def process_csv_and_generate_report(self, csv_file_path: str, output_dir: str, 
                                      client_name: Optional[str] = None) -> Dict:
        """
        Processa um arquivo CSV e gera todos os outputs exigidos
        
        Args:
            csv_file_path: Caminho para o arquivo CSV de telemetria
            output_dir: Diret√≥rio de sa√≠da para os arquivos gerados
            client_name: Nome do cliente (opcional)
            
        Returns:
            Dicion√°rio com informa√ß√µes sobre os arquivos gerados
        """
        try:
            # Criar diret√≥rio de sa√≠da se n√£o existir
            os.makedirs(output_dir, exist_ok=True)
            
            # Extrair nome base do arquivo
            base_filename = os.path.splitext(os.path.basename(csv_file_path))[0]
            
            # 1. Processar o arquivo CSV com todas as etapas
            print(f"üìä Processando arquivo: {csv_file_path}")
            processing_result = process_telemetry_csv(csv_file_path, self.config)
            
            if not processing_result.get('success', False):
                raise Exception(f"Falha no processamento: {processing_result.get('error', 'Erro desconhecido')}")
            
            print("‚úÖ Processamento conclu√≠do com sucesso!")
            
            # 2. Executar testes de QA
            print("üß™ Executando testes de qualidade...")
            qa_results = self.processor.run_qa_tests(processing_result)
            print("‚úÖ Testes de qualidade conclu√≠dos!")
            
            # 3. Verificar se h√° limita√ß√µes e incluir na se√ß√£o apropriada
            limitations = qa_results.get('limitations', [])
            if limitations:
                print("‚ö†Ô∏è  Limita√ß√µes identificadas:")
                for limitation in limitations:
                    print(f"   ‚Ä¢ {limitation}")
            
            # 4. Gerar todos os outputs exigidos
            print("üìÅ Gerando outputs...")
            
            # Gerar outputs adicionais (JSON, CSV de anomalias, logs)
            additional_outputs = self.processor.generate_outputs(
                processing_result, output_dir, base_filename
            )
            
            # Gerar relat√≥rio PDF aprimorado
            pdf_path = os.path.join(output_dir, f"Relatorio_{base_filename}.pdf")
            pdf_success = self.report_generator.create_enhanced_pdf_report(
                processing_result, qa_results, pdf_path, client_name
            )
            
            if pdf_success:
                additional_outputs['pdf'] = pdf_path
                print(f"‚úÖ Relat√≥rio PDF gerado: {pdf_path}")
            else:
                print("‚ùå Falha ao gerar relat√≥rio PDF")
            
            # 5. Retornar informa√ß√µes completas
            result = {
                'success': True,
                'processing_result': processing_result,
                'qa_results': qa_results,
                'outputs': additional_outputs,
                'message': 'Processamento e gera√ß√£o de relat√≥rios conclu√≠dos com sucesso'
            }
            
            return result
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'message': f'Falha no processamento: {str(e)}'
            }
    
    def run_comprehensive_qa_validation(self) -> bool:
        """
        Executa valida√ß√£o QA abrangente do sistema completo
        
        Returns:
            Boolean indicando se todos os testes passaram
        """
        print("üîç Executando valida√ß√£o QA abrangente do sistema...")
        return run_all_qa_tests()
    
    def get_system_info(self) -> Dict:
        """
        Retorna informa√ß√µes sobre o sistema e suas configura√ß√µes
        
        Returns:
            Dicion√°rio com informa√ß√µes do sistema
        """
        return {
            'system_name': 'Sistema de Processamento de Telemetria Veicular',
            'version': '1.0.0',
            'configuration': self.config,
            'features': [
                'Detec√ß√£o autom√°tica de schema',
                'Mapeamento de colunas com fallback',
                'Regras de qualidade e saneamento',
                'C√°lculo de dist√¢ncia via haversine',
                'Detec√ß√£o de viagens',
                'Gera√ß√£o de relat√≥rios PDF adaptativos',
                'M√∫ltiplos formatos de sa√≠da',
                'Testes de aceita√ß√£o QA'
            ],
            'timestamp': datetime.now().isoformat()
        }


def main():
    """Fun√ß√£o principal para execu√ß√£o do sistema"""
    print("üöÄ Sistema de Processamento de Telemetria Veicular")
    print("=" * 50)
    
    # Exibir informa√ß√µes do sistema
    system = TelemetryProcessingSystem()
    info = system.get_system_info()
    
    print(f"Sistema: {info['system_name']}")
    print(f"Vers√£o: {info['version']}")
    print(f"Data/Hora: {info['timestamp']}")
    print()
    
    # Verificar argumentos da linha de comando
    if len(sys.argv) < 2:
        print("Uso: python telemetry_system.py <caminho_arquivo_csv> [diretorio_saida] [nome_cliente]")
        print()
        print("Exemplo: python telemetry_system.py dados/telemetria.csv relatorios/ \"Cliente Exemplo\"")
        return
    
    csv_file_path = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else "relatorios"
    client_name = sys.argv[3] if len(sys.argv) > 3 else None
    
    # Verificar se o arquivo CSV existe
    if not os.path.exists(csv_file_path):
        print(f"‚ùå Arquivo n√£o encontrado: {csv_file_path}")
        return
    
    # Processar arquivo e gerar relat√≥rios
    print(f"üìÑ Processando: {csv_file_path}")
    print(f"üìÇ Diret√≥rio de sa√≠da: {output_dir}")
    if client_name:
        print(f"üë§ Cliente: {client_name}")
    print()
    
    result = system.process_csv_and_generate_report(csv_file_path, output_dir, client_name)
    
    if result['success']:
        print("‚úÖ Processamento conclu√≠do com sucesso!")
        print()
        print("üì§ Arquivos gerados:")
        for output_type, path in result['outputs'].items():
            print(f"   ‚Ä¢ {output_type}: {path}")
        
        # Exibir resumo das m√©tricas principais
        processing_result = result['processing_result']
        distance_metrics = processing_result.get('distance_speed_metrics', {})
        trips = processing_result.get('trips', [])
        
        print()
        print("üìà Resumo das m√©tricas:")
        print(f"   ‚Ä¢ Quilometragem total: {distance_metrics.get('total_km', 0):.2f} km")
        print(f"   ‚Ä¢ Velocidade m√°xima: {distance_metrics.get('max_speed', 0):.2f} km/h")
        print(f"   ‚Ä¢ N√∫mero de viagens: {len(trips)}")
        
        # Exibir resultados dos testes QA
        qa_results = result['qa_results']
        print()
        print("üß™ Resultados dos testes QA:")
        passed_tests = 0
        total_tests = 0
        for test_name, test_result in qa_results.items():
            if test_name not in ['limitations', 'error']:
                total_tests += 1
                if test_result == 'passed':
                    passed_tests += 1
                    status = "‚úÖ"
                elif test_result == 'skipped':
                    status = "‚è≠Ô∏è"
                else:
                    status = "‚ùå"
                print(f"   {status} {test_name}: {test_result}")
        
        print(f"   Total: {passed_tests}/{total_tests} testes passaram")
        
        # Exibir limita√ß√µes se houver
        limitations = qa_results.get('limitations', [])
        if limitations:
            print()
            print("‚ö†Ô∏è  Limita√ß√µes identificadas:")
            for limitation in limitations:
                print(f"   ‚Ä¢ {limitation}")
    else:
        print(f"‚ùå Erro no processamento: {result['error']}")
    
    print()
    print("üèÅ Processo conclu√≠do!")


# Exemplo de uso program√°tico
def example_usage():
    """Exemplo de uso program√°tico do sistema"""
    print("üìù Exemplo de uso program√°tico:")
    
    # Configura√ß√£o do sistema
    config = {
        'speed_outlier_threshold': 220,
        'trip_speed_threshold': 3,
        'trip_min_duration_s': 60,
        'gps_jump_distance_km': 500
    }
    
    # Inicializar sistema
    system = TelemetryProcessingSystem(config)
    
    # Processar arquivo de exemplo (substituir pelo caminho real)
    # result = system.process_csv_and_generate_report(
    #     'caminho/para/arquivo.csv',
    #     'diretorio/de/saida',
    #     'Nome do Cliente'
    # )
    # 
    # if result['success']:
    #     print("Processamento conclu√≠do com sucesso!")
    # else:
    #     print(f"Erro: {result['error']}")


if __name__ == "__main__":
    # Se chamado diretamente, executar fun√ß√£o principal
    if len(sys.argv) > 1:
        main()
    else:
        # Exibir informa√ß√µes do sistema
        system = TelemetryProcessingSystem()
        info = system.get_system_info()
        print("üöÄ Sistema de Processamento de Telemetria Veicular")
        print("=" * 50)
        print(f"Vers√£o: {info['version']}")
        print()
        print(".Funcionalidades:")
        for feature in info['features']:
            print(f"   ‚Ä¢ {feature}")
        print()
        print("Para processar um arquivo CSV, use:")
        print("   python telemetry_system.py <caminho_arquivo_csv> [diretorio_saida] [nome_cliente]")